name: Build

on:
  push:
    tags:
      - '*.*.*'
  workflow_dispatch:

env:
  BUILD_NAME: ${{ github.event.repository.name }}-${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || github.run_id }}
  BUILD_VERSION: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('0.0.0-{0}', github.run_id) }}
  NODE_VERSION: '20.x'

jobs:
  build_frontend:
    name: Build Frontend
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Dependencies
        uses: bahmutov/npm-install@v1
        with:
          working-directory: frontend

      - name: Vite Build
        working-directory: frontend
        run: npm run build

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BUILD_NAME }}-frontend
          path: frontend/dist/

  build_binary:
    name: Build Binary
    needs: build_frontend
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        arch: [amd64, arm64]
        include:
          - arch: amd64
            gcc_package: gcc
            gcc_command: gcc
            ports: false
          
          - arch: arm64
            gcc_package: gcc-aarch64-linux-gnu
            gcc_command: aarch64-linux-gnu-gcc
            ports: true
    steps:
      - uses: actions/checkout@v4

      - name: Download Frontend
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.BUILD_NAME }}-frontend
          path: frontend/dist
          merge-multiple: true

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Add Ubuntu Ports Repository
        if: ${{ matrix.ports }}
        run: |
          codename=$(lsb_release -s -c)
          sudo dpkg --add-architecture ${{ matrix.arch }}
          sudo add-apt-repository -yn "deb [arch=${{ matrix.arch }}] http://ports.ubuntu.com/ $codename main multiverse universe"
          sudo add-apt-repository -yn "deb [arch=${{ matrix.arch }}] http://ports.ubuntu.com/ $codename-security main multiverse universe"
          sudo add-apt-repository -yn "deb [arch=${{ matrix.arch }}] http://ports.ubuntu.com/ $codename-backports main multiverse universe"
          sudo add-apt-repository -yn "deb [arch=${{ matrix.arch }}] http://ports.ubuntu.com/ $codename-updates main multiverse universe"

      - name: Update Package Index
        continue-on-error: true
        run: sudo apt-get update

      - name: Install Build Tools
        run: sudo apt-get install ${{ matrix.gcc_package }}

      - name: Install VLC
        run: sudo apt-get install libvlc-dev:${{ matrix.arch }}

      - name: Build Binary
        env:
          CC: ${{ matrix.gcc_command }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 1
        run: go build -o dist/${{ env.BUILD_NAME }}-${{ matrix.arch }} -v

      - name: Prepare Debian Package
        run: |
          chmod +x .debpkg/DEBIAN/*
          mkdir -p .debpkg/usr/bin
          cp dist/${{ env.BUILD_NAME }}-${{ matrix.arch }} .debpkg/usr/bin/
      
      - name: Build Debian Package
        uses: jiro4989/build-deb-action@v3
        id: build_package
        with:
          package: ${{ github.event.repository.name }}
          package_root: .debpkg
          maintainer: ${{ github.event.repository.owner.name }}
          version: ${{ env.BUILD_VERSION }}
          arch: ${{ matrix.arch }}
          desc: Open-Source Jukebox Software

      - name: Rename Debian Package
        run: mv ${{ steps.build_package.outputs.file_name }} dist/${{ env.BUILD_NAME }}-${{ matrix.arch }}.deb

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BUILD_NAME }}-${{ matrix.arch }}
          path: dist/